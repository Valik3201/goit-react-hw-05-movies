{"version":3,"file":"static/js/590.ed54b3f7.chunk.js","mappings":"mPAEMA,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAQ,IAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACVC,EAAAA,EAAAA,IAAU,UAADC,OACpBP,EAAQ,2BAClBQ,EAAAA,GACA,KAAD,EAHW,OAGXP,EAAAE,EAAAM,KAHOP,EAAID,EAAJC,KAAIC,EAAAO,OAAA,SAKLR,EAAKS,SAAO,wBAAAR,EAAAS,OAAA,GAAAb,EAAA,KACpB,gBAPiBc,GAAA,OAAAjB,EAAAkB,MAAA,KAAAC,UAAA,K,uCCiDlB,EA1CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAERE,GAAmCC,EAAAA,EAAAA,GAAS,CAC1CC,SAAU,CAAC,UAAWJ,GACtBK,QAAS,kBAAM1B,EAAaqB,EAAQ,IAF9Bd,EAAIgB,EAAJhB,KAAMoB,EAASJ,EAATI,UAAWC,EAAKL,EAALK,MAKzB,OAAID,GACKE,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGVF,GACKG,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,wBAAsBF,EAAMI,YAIxCD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,YACHvB,EAAK0B,KAAI,SAAAC,GAAM,OACdL,EAAAA,EAAAA,KAAA,MAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAKI,EAAOC,UAEZN,EAAAA,EAAAA,KAAA,KAAAC,UAAIM,EAAAA,EAAAA,IAAO,IAAIC,KAAKH,EAAOI,YAAa,uBAEvC,6CAA6CC,KAC5CL,EAAOM,UAEPX,EAAAA,EAAAA,KAAA,OAAAC,UAAMW,EAAAA,EAAAA,IAAMP,EAAOM,YAEnBX,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACa,EAAAA,EAAa,CAAAZ,SAAEI,EAAOM,gBAZtBN,EAAOS,GAgBX,MAIb,C,8FC/CAhC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAME,EAAc,CAClB+B,QAAS,CACPC,OAAQ,mBACRC,cACE,8N","sources":["services/fetchReviews.js","components/Reviews.jsx","services/api.js"],"sourcesContent":["import { axios, baseOptions } from './api';\n\nconst fetchReviews = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}/reviews?language=en-US`,\n    baseOptions\n  );\n\n  return data.results;\n};\n\nexport { fetchReviews };\n","import { useParams } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { fetchReviews } from 'services/fetchReviews';\n\nimport { format } from 'date-fns';\nimport ReactMarkdown from 'react-markdown';\nimport parse from 'html-react-parser';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['reviews', movieId],\n    queryFn: () => fetchReviews(movieId),\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error fetching data: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Reviews</h1>\n      {data.map(review => (\n        <ul key={review.id}>\n          <li>\n            <h4>{review.author}</h4>\n\n            <p>{format(new Date(review.created_at), 'MMMM d, yyyy H:mm')}</p>\n\n            {/<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/.test(\n              review.content\n            ) ? (\n              <div>{parse(review.content)}</div>\n            ) : (\n              <div>\n                <ReactMarkdown>{review.content}</ReactMarkdown>\n              </div>\n            )}\n          </li>\n        </ul>\n      ))}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst baseOptions = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYTMyZWM5MzExODExYjA2NDkyNzhmZGFmYzEyMzAwZSIsInN1YiI6IjY1YzIwN2U2ZjQ0ZjI3MDE2M2MwYzBjMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.zkFtcEcge5gUigfN2sq7K5C-DaNfEfDz1qyoSucACIQ',\n  },\n};\n\nexport { axios, baseOptions };\n"],"names":["fetchReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movie_id","_yield$axios$get","data","_context","prev","next","axios","concat","baseOptions","sent","abrupt","results","stop","_x","apply","arguments","movieId","useParams","_useQuery","useQuery","queryKey","queryFn","isLoading","error","_jsx","children","_jsxs","message","map","review","author","format","Date","created_at","test","content","parse","ReactMarkdown","id","headers","accept","Authorization"],"sourceRoot":""}